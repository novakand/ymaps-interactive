#!/usr/bin/env node
/* eslint-disable no-console */
'use strict';

/**
 * –ü—Ä–æ–π–¥—ë—Ç—Å—è –ø–æ –≤—Å–µ–º *.json –≤ DEFAULT_DIR (—Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ),
 * –¥–ª—è –∫–∞–∂–¥–æ–≥–æ Feature –≤ FeatureCollection:
 *  - –¥–æ–±–∞–≤–∏—Ç/–æ–±–Ω–æ–≤–∏—Ç style-–ø–æ–ª—è –≤ properties:
 *      strokeColor:"", strokeOpacity:"0", strokeWeight:"",
 *      fillColor:"#40643b", fillOpacity:"0.9"
 *  - —É–¥–∞–ª–∏—Ç properties.status –∏ properties.statusColor
 *  - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç properties.statusLabel = "–°–≤–æ–±–æ–¥–Ω–æ"
 *
 * –û–ø—Ü–∏–∏:
 *   --dir=/abs/or/relative/path   (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é DEFAULT_DIR)
 *   --dry                         (—Ç–æ–ª—å–∫–æ –ø–æ–∫–∞–∑–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è, —Ñ–∞–π–ª—ã –Ω–µ –ø–∏—Å–∞—Ç—å)
 *   --backup                      (—Å–¥–µ–ª–∞—Ç—å .bak –æ–¥–∏–Ω —Ä–∞–∑ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å—é)
 */

const fs = require('fs');
const path = require('path');

const DEFAULT_DIR = path.resolve(__dirname, '../projects/app/src/assets/data/parcels');

const args = process.argv.slice(2);
const dirArg = args.find(a => a.startsWith('--dir='));
const DRY = args.includes('--dry');
const MAKE_BACKUP = args.includes('--backup');
const ROOT = dirArg ? path.resolve(process.cwd(), dirArg.split('=')[1]) : DEFAULT_DIR;

const STYLE_DEFAULTS = {
    labelKind: ""
};

let filesScanned = 0;
let filesChanged = 0;
let featuresTouched = 0;

main().catch(err => {
    console.error('‚ùå –û—à–∏–±–∫–∞:', err);
    process.exit(1);
});

async function main() {
    const files = listJsonFiles(ROOT);
    if (files.length === 0) {
        console.warn('‚ö†Ô∏è  JSON-—Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤', ROOT);
        return;
    }

    for (const file of files) {
        filesScanned++;
        const before = fs.readFileSync(file, 'utf8');
        let changed = false;
        let data;

        try {
            data = JSON.parse(before);
        } catch (e) {
            console.warn('‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞—é (–Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON):', file);
            continue;
        }

        // –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º FeatureCollection
        if (data && data.type === 'FeatureCollection' && Array.isArray(data.features)) {
            let localTouched = 0;
            data.features = data.features.map(feat => {
                if (!feat || feat.type !== 'Feature') return feat;

                const props = feat.properties ?? (feat.properties = {});
                let modifiedHere = false;

                // –¥–æ–±–∞–≤–∏—Ç—å / –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∏–ª–µ–≤—ã–µ –ø–æ–ª—è
                for (const [k, v] of Object.entries(STYLE_DEFAULTS)) {
                    if (props[k] !== v) {
                        props[k] = v;
                        modifiedHere = true;
                    }
                }

                // —É–¥–∞–ª–∏—Ç—å –ª–∏—à–Ω–∏–µ
                if ('status' in props) {
                    delete props.status;
                    modifiedHere = true;
                }
                if ('statusColor' in props) {
                    delete props.statusColor;
                    modifiedHere = true;
                }

                // –≤—ã—Å—Ç–∞–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å-–ª–µ–π–±–ª (—Å –∑–∞–≥–ª–∞–≤–Ω–æ–π)
                if (props.statusLabel !== '–°–≤–æ–±–æ–¥–Ω–æ') {
                    props.statusLabel = '–°–≤–æ–±–æ–¥–Ω–æ';
                    modifiedHere = true;
                }

                if (modifiedHere) {
                    localTouched++;
                }
                return feat;
            });

            if (localTouched > 0) {
                changed = true;
                featuresTouched += localTouched;
            }
        }

        if (changed) {
            filesChanged++;
            if (DRY) {
                console.log(`üîé [dry] –ò–∑–º–µ–Ω–∏–ª—Å—è –±—ã: ${rel(file)} (features: +${featuresTouched})`);
            } else {
                if (MAKE_BACKUP) {
                    const bak = file + '.bak';
                    if (!fs.existsSync(bak)) {
                        fs.copyFileSync(file, bak);
                    }
                }
                const after = JSON.stringify(data, null, 2) + '\n';
                fs.writeFileSync(file, after, 'utf8');
                console.log(`üíæ –û–±–Ω–æ–≤–ª—ë–Ω: ${rel(file)}`);
            }
        }
    }

    console.log('\n‚úÖ –ì–æ—Ç–æ–≤–æ.');
    console.log(`–§–∞–π–ª–æ–≤ –ø—Ä–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: ${filesScanned}`);
    console.log(`–§–∞–π–ª–æ–≤ –∏–∑–º–µ–Ω–µ–Ω–æ:      ${filesChanged}`);
    console.log(`–§–∏—á –∑–∞—Ç—Ä–æ–Ω—É—Ç–æ:        ${featuresTouched}`);
}

function listJsonFiles(dir) {
    const out = [];
    walk(dir, out);
    // —Ç–æ–ª—å–∫–æ .json, –±–µ–∑ .bak, .bakXXXX –∏ —Ç.–ø.
    return out.filter(f => f.endsWith('.json'));
}

function walk(dir, out) {
    const entries = fs.readdirSync(dir, { withFileTypes: true });
    for (const e of entries) {
        // –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —è–≤–Ω—ã–µ –±—ç–∫–∞–ø—ã/–ª–∏—à–Ω–∏–µ
        if (e.name.endsWith('.bak') || e.name.includes('.bak')) continue;
        const full = path.join(dir, e.name);
        if (e.isDirectory()) {
            walk(full, out);
        } else if (e.isFile()) {
            out.push(full);
        }
    }
}

function rel(p) {
    return path.relative(process.cwd(), p) || p;
}
